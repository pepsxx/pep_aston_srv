Практический тест для бэкенд-разработчика
Разработайте и внедрите RESTful API, резервный сервис и модель данных для создания банковских счетов
и перевода денег между ними. Взаимодействие с API будет осуществляться с использованием HTTP-запросов.
Требования
• Учетные записи создаются путем указания имени получателя и четырехзначного PIN-кода.
• Номер учетной записи создается автоматически. У одного получателя может быть несколько
учетных записей.
• После создания учетной записи вы можете вносить, снимать или переводить деньги между
• учетные записи.
• Любая операция, при которой средства списываются со счета, должна содержать правильный PIN
-код.
• Необходимо вести историю транзакций для всех изменений баланса.
• При определенном звонке будут получены все учетные записи, имя получателя и их текущий
• баланс. Другой будет извлекать все транзакции для определенной учетной записи.
• API-интерфейсы будут использовать полезные данные JSON, когда это применимо. Соответствующие коды ошибок должны быть
возвращены, если операции завершаются неудачно.
• Используйте базу данных в памяти в качестве резервного хранилища.
• Приложение должно быть создано с использованием Kotlin (предпочтительно) или Java. Используйте Maven для
управления зависимостями.
• Включите модульное тестирование для вашего сервисного уровня.
• Включите файл README с инструкциями по использованию API и любыми решениями, принятыми
при разработке и внедрении приложения.
Рекомендации
• Используйте любые технологии, которые вам удобны, но рекомендуется настроить
свой проект с помощью Spring Boot.
• Используйте лучшие практики при реализации вашего кода, чтобы обеспечить высококачественный
результат. Используйте внедрение зависимостей, избегайте статики, неизменяемых типов и т.д…
• Однако делайте это просто и по существу. Не переусердствуйте. Например, нет необходимости добавлять уровни авторизации.

• Может оказаться полезным включить скрипты или другие механизмы для заполнения вашей базы
данных исходными данными.
• Документы Swagger помогают пользователям находить и использовать ваш API.
• Используйте здравый смысл для проверки входных данных в API, объясняйте свои решения в своем
ПРОЧИТАЙТЕ файл.
Подлежащий доставке
• Ваш исходный код размещен на Github, Gitlab или Bitbucket.